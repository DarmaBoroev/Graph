#include "List.h"
#include <iostream>

using namespace std;

List::~List() //Деструктор вынесен за класс
{
	while (Head != nullptr)  //Пока по адресу не пусто 
	{
		Node *temp = Head->next; //Временная переменная для хранения адреса следующего элемента
		delete Head; //Освобождаем адрес обозначающий начало
		Head = temp; //Меняем адрес на следующий
	}
}

void List::Add(int x) //Функция добавления элементов в список
{
	Node *temp = new Node; //При каждом вызове выделяется память
	temp->val = x; //Записываем x в элемент структуры  Node (в x структуры Node)
	temp->next = Head; //Указываем, что след. элемент это объект по адресу Head
	Head = temp; //Указываем, что последний активный элемент это только что введенный
}

void List::Show() //Функция отображения списка на экране
{
	Node *temp = Head; //Определяем указатель, который изначально он равен адресу начала списка
	while (temp != nullptr) //До тех пор пока не встретит пустое значение
	{
		cout << temp->val << " "; //Выведет элемент x из списка
		temp = temp->next; //Указываем, что далее нам нужен следующий элемент
	}
}

void List::Pop(const int N) //В качестве параметра принимается номер извлекаемого элемента
{
	Node *temp = Head; //Обращаемся к началу списка
	if ((Head != nullptr) && (N<size)) //Делаем проверку на то что список не пуст и N не превышает число его элементов
	{
		for (int i = 0; i<N; i++) temp = temp->next;
		cout << temp->val << " " << endl; 

	}
	cout << endl;
}